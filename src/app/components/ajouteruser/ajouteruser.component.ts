import { Component, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { FormBuilder, FormGroup, Validators, AbstractControl, ValidationErrors, ReactiveFormsModule } from '@angular/forms';
import { MatDialogRef, MatDialogModule } from '@angular/material/dialog';
import { CommonModule } from '@angular/common';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatSelectModule } from '@angular/material/select';
import { MatOptionModule } from '@angular/material/core';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { UserService } from 'src/app/services/user.service';

@Component({
  selector: 'app-ajouteruser',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    MatDialogModule,
    MatFormFieldModule,
    MatInputModule,
    MatSelectModule,
    MatOptionModule,
    MatButtonModule,
    MatIconModule,
  ],
  templateUrl: './ajouteruser.component.html',
  styleUrls: ['./ajouteruser.component.scss'],
  schemas: [CUSTOM_ELEMENTS_SCHEMA]
})
export class AjouteruserComponent {
  form: FormGroup;
  hidePassword = true;
  private autoGeneratedEmail = true; // Flag pour contrôler génération automatique

  constructor(
    private fb: FormBuilder,
    private userService: UserService,
    private dialogRef: MatDialogRef<AjouteruserComponent>
  ) {
    this.form = this.fb.group({
      nom: ['', Validators.required],
      prenom: ['', Validators.required],
      email: ['', [Validators.required, Validators.email, this.emailTessiValidator]],
      password: [this.generatePassword(), Validators.required],
      role: ['', Validators.required],
     
    });

    // Génération auto email à la modification du nom/prenom (si autoGeneratedEmail === true)
    this.form.get('nom')?.valueChanges.subscribe(() => this.maybeGenerateEmail());
    this.form.get('prenom')?.valueChanges.subscribe(() => this.maybeGenerateEmail());

    // Si l’utilisateur modifie manuellement l’email, on désactive la génération auto
    this.form.get('email')?.valueChanges.subscribe(value => {
      const prenom = this.form.get('prenom')?.value?.trim().toLowerCase() || '';
      const nom = this.form.get('nom')?.value?.trim().toLowerCase() || '';
      const expectedEmail = prenom && nom ? `${prenom}.${nom}@tessi.fr` : '';
      this.autoGeneratedEmail = value === expectedEmail;
    });
  }

// Validation personnalisée email @tessi.fr ou @gmail.com
// Validation personnalisée email @tessi.fr ou @gmail.com
emailTessiValidator(control: AbstractControl): ValidationErrors | null {
  const email = control.value?.toLowerCase();
  if (email && !(email.endsWith('@tessi.fr') || email.endsWith('@gmail.com'))) {
    return { emailDomainInvalid: true };
  }
  return null;
}



  // Génère le mail si autoGeneratedEmail === true
  maybeGenerateEmail(): void {
    if (!this.autoGeneratedEmail) return;

    const prenom = this.form.get('prenom')?.value?.trim().toLowerCase() || '';
    const nom = this.form.get('nom')?.value?.trim().toLowerCase() || '';

    if (prenom && nom) {
      const emailGenere = `${prenom}.${nom}@tessi.fr`;
      this.form.get('email')?.setValue(emailGenere, { emitEvent: false });
    } else {
      this.form.get('email')?.setValue('', { emitEvent: false });
    }
  }

  togglePasswordVisibility(): void {
    this.hidePassword = !this.hidePassword;
  }

  generatePassword(): string {
    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+';
    const length = 10;
    let password = '';
    for (let i = 0; i < length; i++) {
      password += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return password;
  }

  onCancel(): void {
    this.dialogRef.close();
  }

onSubmit(): void {
  if (this.form.valid) {
    const token = localStorage.getItem('token');
    console.log('Token envoyé :', token); // ← ajoute ce log

    this.userService.add(this.form.value).subscribe({
      next: () => this.dialogRef.close(true),
      error: err => console.error('Erreur d’ajout', err)
    });
  }
}

  }

